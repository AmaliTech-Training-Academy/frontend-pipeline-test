name: Security Scanning Module

on:
  workflow_call:
    inputs:
      project_type:
        description: "Type of project (frontend or backend)"
        required: true
        type: string
      scan_dependencies:
        description: "Scan dependencies for vulnerabilities"
        required: false
        type: boolean
        default: true
      scan_code:
        description: "Run static code analysis"
        required: false
        type: boolean
        default: true
      trivy_severity:
        description: "Trivy severity threshold"
        required: false
        type: string
        default: "HIGH,CRITICAL"
      sonar_project_key:
        description: "SonarQube project key override"
        required: false
        type: string
      skip_quality_gate:
        description: "Skip SonarQube quality gate check"
        required: false
        type: boolean
        default: false
    outputs:
      dependency_scan_results:
        description: "Dependency scan results"
        value: ${{ jobs.security-scan.outputs.dependency_scan_results }}
      sonar_quality_gate:
        description: "SonarQube quality gate status"
        value: ${{ jobs.security-scan.outputs.sonar_quality_gate }}
      security_score:
        description: "Overall security score"
        value: ${{ jobs.security-scan.outputs.security_score }}

permissions:
  contents: read           # Read repository content and history
  security-events: write   # Upload SARIF results to GitHub Security tab
  actions: read           # Read workflow run information
  issues: write           # Create security issues for critical vulnerabilities

jobs:
  security-scan:
    name: Security Scanning & Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 45
    outputs:
      dependency_scan_results: ${{ steps.dependency-scan.outputs.results }}
      sonar_quality_gate: ${{ steps.final-quality-gate.outputs.quality_gate }}
      security_score: ${{ steps.security-score.outputs.score }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for SonarQube

      - name: Setup pnpm (for frontend)
        if: inputs.project_type == 'frontend'
        uses: pnpm/action-setup@v3
        with:
          version: "9.0.0"
          run_install: false

      - name: Setup Node.js with pnpm cache (for frontend)
        if: inputs.project_type == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies (for frontend)
        if: inputs.project_type == 'frontend'
        run: |
          if [ -f pnpm-lock.yaml ]; then
            pnpm install --frozen-lockfile --prefer-offline
          else
            pnpm install --prefer-offline
          fi

      # Initialize security tracking
      - name: Initialize security tracking
        run: |
          mkdir -p security-reports
          echo "# Security Scan Results" > security-reports/summary.md
          echo "" >> security-reports/summary.md
          echo "🔍 **Scan Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-reports/summary.md
          echo "📂 **Project**: ${{ github.repository }}" >> security-reports/summary.md
          echo "🌿 **Branch**: ${{ github.ref_name }}" >> security-reports/summary.md
          echo "📝 **Commit**: ${{ github.sha }}" >> security-reports/summary.md
          echo "" >> security-reports/summary.md

      # Enhanced Dependency Vulnerability Scanning
      - name: Enhanced dependency vulnerability scan
        id: dependency-scan
        if: inputs.scan_dependencies
        run: |
          echo "🔍 Starting comprehensive dependency vulnerability scan..."
          echo "" >> security-reports/summary.md
          echo "## 📦 Dependency Vulnerability Scan" >> security-reports/summary.md
          echo "" >> security-reports/summary.md

          TOTAL_VULNS=0
          CRITICAL_VULNS=0
          HIGH_VULNS=0

          # npm audit for Node.js projects
          if [ "${{ inputs.project_type }}" == "frontend" ] && [ -f package.json ]; then
            echo "### npm/pnpm Audit Results" >> security-reports/summary.md
            echo "Running pnpm audit..."
            
            # Run audit and capture results
            if pnpm audit --audit-level low --json > security-reports/audit-results.json 2>/dev/null; then
              echo "✅ No vulnerabilities found in npm audit" >> security-reports/summary.md
              echo "results=passed" >> $GITHUB_OUTPUT
            else
              AUDIT_EXIT_CODE=$?
              echo "⚠️ Vulnerabilities found in dependencies" >> security-reports/summary.md
              
              # Parse and display results
              if [ -f security-reports/audit-results.json ]; then
                # Extract vulnerability counts
                AUDIT_VULNS=$(cat security-reports/audit-results.json | jq -r '.metadata.vulnerabilities | to_entries[] | "\(.key): \(.value)"' 2>/dev/null || echo "Failed to parse")
                echo "```" >> security-reports/summary.md
                echo "$AUDIT_VULNS" >> security-reports/summary.md
                echo "```" >> security-reports/summary.md
                
                # Count critical and high
                AUDIT_CRITICAL=$(cat security-reports/audit-results.json | jq -r '.metadata.vulnerabilities.critical // 0' 2>/dev/null || echo "0")
                AUDIT_HIGH=$(cat security-reports/audit-results.json | jq -r '.metadata.vulnerabilities.high // 0' 2>/dev/null || echo "0")
                CRITICAL_VULNS=$((CRITICAL_VULNS + AUDIT_CRITICAL))
                HIGH_VULNS=$((HIGH_VULNS + AUDIT_HIGH))
              fi
              
              echo "results=failed" >> $GITHUB_OUTPUT
            fi
            echo "" >> security-reports/summary.md
          fi

          # OWASP Dependency Check
          echo "### OWASP Dependency Check" >> security-reports/summary.md
          echo "Running OWASP Dependency Check..."

          # Create suppressions file if it doesn't exist
          if [ ! -f .dependency-check-suppressions.xml ]; then
            cat > .dependency-check-suppressions.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <suppressions xmlns="https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd">
            <!-- Add suppressions here if needed -->
          </suppressions>
          EOF
          fi

          docker run --rm \
            -v "$(pwd)":/src \
            -v "$(pwd)/security-reports":/reports \
            owasp/dependency-check:latest \
            --scan /src \
            --exclude "**/.github/**" \
            --exclude "**/node_modules/**" \
            --format JSON \
            --format HTML \
            --format CSV \
            --out /reports \
            --suppression /src/.dependency-check-suppressions.xml \
            --enableRetired \
            --cveValidForHours 24 \
            --failOnCVSS 7 \
            --project "${{ github.repository }}" || true

          if [ -f security-reports/dependency-check-report.json ]; then
            # Parse OWASP results
            OWASP_VULNS=$(cat security-reports/dependency-check-report.json | jq '[.dependencies[]?.vulnerabilities[]? // empty] | length' 2>/dev/null || echo "0")
            OWASP_CRITICAL=$(cat security-reports/dependency-check-report.json | jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "CRITICAL")] | length' 2>/dev/null || echo "0")
            OWASP_HIGH=$(cat security-reports/dependency-check-report.json | jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "HIGH")] | length' 2>/dev/null || echo "0")
            
            echo "- **Total vulnerabilities found**: $OWASP_VULNS" >> security-reports/summary.md
            echo "- **Critical**: $OWASP_CRITICAL" >> security-reports/summary.md
            echo "- **High**: $OWASP_HIGH" >> security-reports/summary.md
            
            TOTAL_VULNS=$((TOTAL_VULNS + OWASP_VULNS))
            CRITICAL_VULNS=$((CRITICAL_VULNS + OWASP_CRITICAL))
            HIGH_VULNS=$((HIGH_VULNS + OWASP_HIGH))
            
            if [ "$OWASP_VULNS" -gt 0 ]; then
              echo "" >> security-reports/summary.md
              echo "**Top vulnerabilities:**" >> security-reports/summary.md
              cat security-reports/dependency-check-report.json | jq -r '
                [.dependencies[]?.vulnerabilities[]? // empty] | 
                sort_by(.cvssV3?.baseScore // .cvssV2?.score // 0) | 
                reverse | 
                .[0:5][] | 
                "- **\(.name)** (CVSS: \(.cvssV3?.baseScore // .cvssV2?.score // "N/A")): \(.description[0:100])..."
              ' >> security-reports/summary.md 2>/dev/null || echo "- Could not parse vulnerability details" >> security-reports/summary.md
            fi
          else
            echo "❌ OWASP Dependency Check failed to generate report" >> security-reports/summary.md
          fi
          echo "" >> security-reports/summary.md

          # Store summary stats
          echo "TOTAL_VULNS=$TOTAL_VULNS" >> $GITHUB_ENV
          echo "CRITICAL_VULNS=$CRITICAL_VULNS" >> $GITHUB_ENV
          echo "HIGH_VULNS=$HIGH_VULNS" >> $GITHUB_ENV

      # Enhanced Trivy Security Scanner with better reporting
      - name: Enhanced Trivy vulnerability scanner
        if: inputs.scan_dependencies
        run: |
          echo "### Trivy Security Scanner" >> security-reports/summary.md
          echo "Running Trivy filesystem scan..."

          # Run Trivy with multiple output formats
          docker run --rm \
            -v "$(pwd)":/workspace \
            -v "$(pwd)/security-reports":/reports \
            aquasec/trivy:latest \
            fs /workspace \
            --severity ${{ inputs.trivy_severity }} \
            --format sarif \
            --output /reports/trivy-results.sarif \
            --skip-dirs .github,node_modules \
            --timeout 15m

          # Also generate table format for summary
          docker run --rm \
            -v "$(pwd)":/workspace \
            -v "$(pwd)/security-reports":/reports \
            aquasec/trivy:latest \
            fs /workspace \
            --severity ${{ inputs.trivy_severity }} \
            --format table \
            --output /reports/trivy-table.txt \
            --skip-dirs .github,node_modules \
            --timeout 15m

          # Generate JSON format for parsing
          docker run --rm \
            -v "$(pwd)":/workspace \
            -v "$(pwd)/security-reports":/reports \
            aquasec/trivy:latest \
            fs /workspace \
            --severity ${{ inputs.trivy_severity }} \
            --format json \
            --output /reports/trivy-results.json \
            --skip-dirs .github,node_modules \
            --timeout 15m

          # Parse and display results
          if [ -f security-reports/trivy-results.json ]; then
            TRIVY_VULNS=$(cat security-reports/trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? // empty] | length' 2>/dev/null || echo "0")
            TRIVY_CRITICAL=$(cat security-reports/trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' 2>/dev/null || echo "0")
            TRIVY_HIGH=$(cat security-reports/trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' 2>/dev/null || echo "0")
            
            echo "- **Total vulnerabilities**: $TRIVY_VULNS" >> security-reports/summary.md
            echo "- **Critical**: $TRIVY_CRITICAL" >> security-reports/summary.md
            echo "- **High**: $TRIVY_HIGH" >> security-reports/summary.md
            
            if [ "$TRIVY_VULNS" -gt 0 ] && [ -f security-reports/trivy-table.txt ]; then
              echo "" >> security-reports/summary.md
              echo "**Detailed findings:**" >> security-reports/summary.md
              echo "```" >> security-reports/summary.md
              head -50 security-reports/trivy-table.txt >> security-reports/summary.md
              echo "```" >> security-reports/summary.md
            fi
            
            # Update totals
            TOTAL_VULNS=$((${TOTAL_VULNS:-0} + TRIVY_VULNS))
            CRITICAL_VULNS=$((${CRITICAL_VULNS:-0} + TRIVY_CRITICAL))
            HIGH_VULNS=$((${HIGH_VULNS:-0} + TRIVY_HIGH))
            
            echo "TOTAL_VULNS=$TOTAL_VULNS" >> $GITHUB_ENV
            echo "CRITICAL_VULNS=$CRITICAL_VULNS" >> $GITHUB_ENV
            echo "HIGH_VULNS=$HIGH_VULNS" >> $GITHUB_ENV
          else
            echo "❌ Trivy scan failed to generate results" >> security-reports/summary.md
          fi
          echo "" >> security-reports/summary.md

      - name: Upload Trivy scan results to GitHub Security tab
        if: ${{ inputs.scan_dependencies && always() && hashFiles('security-reports/trivy-results.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "security-reports/trivy-results.sarif"
          category: "trivy-fs-scan"

      # Enhanced CodeQL Analysis
      - name: Initialize CodeQL
        if: inputs.scan_code
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ inputs.project_type == 'frontend' && 'javascript' || 'java' }}
          queries: security-extended,security-and-quality
          config-file: ./.github/codeql/codeql-config.yml

      - name: Create CodeQL config
        if: inputs.scan_code
        run: |
          mkdir -p .github/codeql
          cat > .github/codeql/codeql-config.yml << 'EOF'
          name: "Security-focused CodeQL Configuration"

          queries:
            - uses: security-extended
            - uses: security-and-quality

          paths-ignore:
            - "**/.github/**"
            - "**/node_modules/**"
            - "**/dist/**"
            - "**/build/**"
            - "**/__tests__/**"
            - "**/*.test.*"
            - "**/*.spec.*"

          paths:
            - "src/"
            - "app/"
            - "components/"
            - "lib/"
            - "utils/"
            - "hooks/"
            - "services/"
          EOF

      - name: Autobuild
        if: inputs.scan_code
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        if: inputs.scan_code
        id: code-scan
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ inputs.project_type == 'frontend' && 'javascript' || 'java' }}"
          upload: true

      # Enhanced SonarQube Analysis
      - name: Create SonarQube project properties
        if: inputs.scan_code
        run: |
          # Ensure sonar-project.properties exists with comprehensive settings
          cat > sonar-project.properties << 'EOF'
          # SonarQube Project Configuration
          sonar.projectKey=${{ inputs.sonar_project_key || github.repository }}
          sonar.organization=amalitech-training-academy
          sonar.projectName=${{ github.repository }}
          sonar.projectVersion=${{ github.sha }}

          # Source settings
          sonar.sources=src,app,components,lib,utils,hooks,services
          sonar.tests=__tests__,**/*.test.*,**/*.spec.*
          sonar.exclusions=**/.github/**,**/node_modules/**,**/dist/**,**/build/**,**/*.min.js
          sonar.test.exclusions=**/.github/**,**/node_modules/**,**/dist/**,**/build/**

          # Language settings
          sonar.javascript.lcov.reportPaths=coverage/lcov.info
          sonar.typescript.lcov.reportPaths=coverage/lcov.info
          sonar.testExecutionReportPaths=coverage/test-report.xml

          # Security settings
          sonar.security.review.cwe=true
          sonar.security.review.owasp=true
          sonar.security.hotspots.inheritance=true

          # Quality settings
          sonar.qualitygate.wait=true
          sonar.qualitygate.timeout=300
          EOF

      - name: SonarQube Scan
        id: sonar-scan
        if: inputs.scan_code
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Fetch SonarQube Quality Gate
        id: sonar-quality-gate
        if: ${{ inputs.scan_code && !inputs.skip_quality_gate }}
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Parse SonarQube results
        if: inputs.scan_code
        run: |
          echo "## 🔬 Static Code Analysis" >> security-reports/summary.md
          echo "" >> security-reports/summary.md
          echo "### SonarQube Analysis" >> security-reports/summary.md

          if [ "${{ steps.sonar-quality-gate.outputs.quality-gate-status }}" != "" ]; then
            echo "- **Quality Gate**: ${{ steps.sonar-quality-gate.outputs.quality-gate-status }}" >> security-reports/summary.md
          else
            echo "- **Quality Gate**: Skipped or not available" >> security-reports/summary.md
          fi

          # Try to get project metrics from SonarQube API if available
          if [ -n "${{ secrets.SONAR_TOKEN }}" ] && [ -n "${{ secrets.SONAR_HOST_URL }}" ]; then
            PROJECT_KEY="${{ inputs.sonar_project_key || github.repository }}"
            echo "- **Project Dashboard**: ${{ secrets.SONAR_HOST_URL }}/dashboard?id=${PROJECT_KEY}" >> security-reports/summary.md
          fi
          echo "" >> security-reports/summary.md

      # Enhanced Semgrep Static Analysis
      - name: Enhanced Semgrep Analysis
        if: inputs.scan_code
        run: |
          echo "### Semgrep Static Analysis" >> security-reports/summary.md

          # Create semgrep ignore file
          cat > .semgrepignore << 'EOF'
          .github/
          node_modules/
          dist/
          build/
          coverage/
          .next/
          .nuxt/
          EOF

          # Run Semgrep with detailed output
          docker run --rm \
            -v "$(pwd)":/src \
            -v "$(pwd)/security-reports":/reports \
            semgrep/semgrep:latest \
            --config=p/security-audit \
            --config=p/owasp-top-ten \
            --config=p/javascript \
            --config=p/typescript \
            --sarif \
            --output=/reports/semgrep-results.sarif \
            /src || true

          # Also generate JSON for parsing
          docker run --rm \
            -v "$(pwd)":/src \
            -v "$(pwd)/security-reports":/reports \
            semgrep/semgrep:latest \
            --config=p/security-audit \
            --config=p/owasp-top-ten \
            --config=p/javascript \
            --config=p/typescript \
            --json \
            --output=/reports/semgrep-results.json \
            /src || true

          # Parse results
          if [ -f security-reports/semgrep-results.json ]; then
            SEMGREP_FINDINGS=$(cat security-reports/semgrep-results.json | jq '.results | length' 2>/dev/null || echo "0")
            echo "- **Total findings**: $SEMGREP_FINDINGS" >> security-reports/summary.md
            
            if [ "$SEMGREP_FINDINGS" -gt 0 ]; then
              echo "" >> security-reports/summary.md
              echo "**Top security findings:**" >> security-reports/summary.md
              cat security-reports/semgrep-results.json | jq -r '
                .results[0:10][] | 
                "- **\(.check_id)** in `\(.path):\(.start.line)`: \(.message[0:100])..."
              ' >> security-reports/summary.md 2>/dev/null || echo "- Could not parse Semgrep findings" >> security-reports/summary.md
            fi
          else
            echo "❌ Semgrep analysis failed" >> security-reports/summary.md
          fi
          echo "" >> security-reports/summary.md

      - name: Upload Semgrep results
        if: ${{ inputs.scan_code && always() && hashFiles('security-reports/semgrep-results.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "security-reports/semgrep-results.sarif"
          category: "semgrep-analysis"

      # Enhanced ESLint Security Rules (for frontend)
      - name: Enhanced ESLint Security Scan
        if: ${{ inputs.project_type == 'frontend' && inputs.scan_code }}
        run: |
          echo "### ESLint Security Analysis" >> security-reports/summary.md

          # Install security plugins if not present
          if ! grep -q "eslint-plugin-security" package.json; then
            echo "Installing ESLint security plugins..."
            pnpm add -D eslint-plugin-security eslint-plugin-no-secrets
          fi

          # Create ESLint security config
          cat > .eslintrc.security.js << 'EOF'
          module.exports = {
            extends: [
              'plugin:security/recommended',
            ],
            plugins: ['security', 'no-secrets'],
            rules: {
              'security/detect-object-injection': 'error',
              'security/detect-eval-with-expression': 'error',
              'security/detect-non-literal-regexp': 'error',
              'security/detect-unsafe-regex': 'error',
              'security/detect-buffer-noassert': 'error',
              'security/detect-child-process': 'error',
              'security/detect-disable-mustache-escape': 'error',
              'security/detect-no-csrf-before-method-override': 'error',
              'security/detect-pseudoRandomBytes': 'error',
              'no-secrets/no-secrets': 'error'
            }
          };
          EOF

          # Run ESLint security scan
          pnpm exec eslint . \
            --ext .js,.jsx,.ts,.tsx \
            --config .eslintrc.security.js \
            --format json \
            --output-file security-reports/eslint-security.json \
            --ignore-path .gitignore || true

          # Parse ESLint results
          if [ -f security-reports/eslint-security.json ]; then
            ESLINT_SECURITY_ISSUES=$(cat security-reports/eslint-security.json | jq '[.[].messages[] | select(.ruleId | test("security|no-secrets"))] | length' 2>/dev/null || echo "0")
            echo "- **Security issues found**: $ESLINT_SECURITY_ISSUES" >> security-reports/summary.md
            
            if [ "$ESLINT_SECURITY_ISSUES" -gt 0 ]; then
              echo "" >> security-reports/summary.md
              echo "**Security issues:**" >> security-reports/summary.md
              cat security-reports/eslint-security.json | jq -r '
                .[].messages[] | 
                select(.ruleId | test("security|no-secrets")) | 
                "- **\(.ruleId)** in `\(.filePath):\(.line):\(.column)`: \(.message)"
              ' >> security-reports/summary.md 2>/dev/null || echo "- Could not parse ESLint security issues" >> security-reports/summary.md
            fi
          else
            echo "❌ ESLint security scan failed" >> security-reports/summary.md
          fi
          echo "" >> security-reports/summary.md

      # Calculate security score
      - name: Calculate security score
        id: security-score
        run: |
          TOTAL_VULNS=${TOTAL_VULNS:-0}
          CRITICAL_VULNS=${CRITICAL_VULNS:-0}
          HIGH_VULNS=${HIGH_VULNS:-0}

          # Simple scoring algorithm
          SCORE=100
          SCORE=$((SCORE - (CRITICAL_VULNS * 20)))  # -20 points per critical
          SCORE=$((SCORE - (HIGH_VULNS * 10)))      # -10 points per high
          SCORE=$((SCORE - ((TOTAL_VULNS - CRITICAL_VULNS - HIGH_VULNS) * 2))) # -2 points per other

          # Ensure score doesn't go below 0
          if [ $SCORE -lt 0 ]; then
            SCORE=0
          fi

          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "SECURITY_SCORE=$SCORE" >> $GITHUB_ENV

      # Enhanced Security Summary
      - name: Generate comprehensive security summary
        run: |
          echo "" >> security-reports/summary.md
          echo "## 📊 Security Summary" >> security-reports/summary.md
          echo "" >> security-reports/summary.md
          echo "| Metric | Count | Status |" >> security-reports/summary.md
          echo "|--------|-------|--------|" >> security-reports/summary.md
          echo "| **Total Vulnerabilities** | ${TOTAL_VULNS:-0} | $([ ${TOTAL_VULNS:-0} -eq 0 ] && echo "✅ Good" || echo "⚠️ Needs attention") |" >> security-reports/summary.md
          echo "| **Critical Vulnerabilities** | ${CRITICAL_VULNS:-0} | $([ ${CRITICAL_VULNS:-0} -eq 0 ] && echo "✅ Good" || echo "❌ Critical") |" >> security-reports/summary.md
          echo "| **High Vulnerabilities** | ${HIGH_VULNS:-0} | $([ ${HIGH_VULNS:-0} -eq 0 ] && echo "✅ Good" || echo "⚠️ High risk") |" >> security-reports/summary.md
          echo "| **Security Score** | ${SECURITY_SCORE:-0}/100 | $([ ${SECURITY_SCORE:-0} -ge 80 ] && echo "✅ Excellent" || [ ${SECURITY_SCORE:-0} -ge 60 ] && echo "⚠️ Good" || echo "❌ Poor") |" >> security-reports/summary.md
          echo "" >> security-reports/summary.md

          if [ ${CRITICAL_VULNS:-0} -gt 0 ]; then
            echo "🚨 **CRITICAL**: This project has critical security vulnerabilities that need immediate attention!" >> security-reports/summary.md
            echo "" >> security-reports/summary.md
          fi

          echo "## 📋 Recommendations" >> security-reports/summary.md
          echo "" >> security-reports/summary.md

          if [ ${TOTAL_VULNS:-0} -gt 0 ]; then
            echo "1. **Review and fix vulnerabilities**: Check the detailed reports above" >> security-reports/summary.md
            echo "2. **Update dependencies**: Run \`pnpm audit fix\` to automatically fix issues" >> security-reports/summary.md
            echo "3. **Review security practices**: Consider implementing additional security measures" >> security-reports/summary.md
          else
            echo "🎉 **Great job!** No major security issues detected." >> security-reports/summary.md
            echo "1. **Keep dependencies updated**: Regularly run security scans" >> security-reports/summary.md
            echo "2. **Monitor security advisories**: Stay informed about new vulnerabilities" >> security-reports/summary.md
          fi

          echo "" >> security-reports/summary.md
          echo "## 🔗 Links" >> security-reports/summary.md
          echo "" >> security-reports/summary.md
          echo "- [GitHub Security Tab](https://github.com/${{ github.repository }}/security)" >> security-reports/summary.md
          echo "- [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> security-reports/summary.md
          if [ -n "${{ secrets.SONAR_HOST_URL }}" ]; then
            echo "- [SonarQube Dashboard](${{ secrets.SONAR_HOST_URL }}/dashboard?id=${{ inputs.sonar_project_key || github.repository }})" >> security-reports/summary.md
          fi

      # Display summary in GitHub Actions
      - name: Display security summary
        run: |
          echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          cat security-reports/summary.md >> $GITHUB_STEP_SUMMARY

      # Quality gate checks
      - name: Check SonarQube Quality Gate Result
        id: quality-gate-check
        if: ${{ inputs.scan_code && !inputs.skip_quality_gate }}
        run: |
          if [ "${{ steps.sonar-quality-gate.outputs.quality-gate-status }}" = "FAILED" ]; then
            echo "::error::SonarQube Quality Gate failed!"
            echo "quality_gate=FAILED" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "::notice::SonarQube Quality Gate passed!"
            echo "quality_gate=PASSED" >> $GITHUB_OUTPUT
          fi

      - name: Set quality gate status for skipped scans
        id: quality-gate-skipped
        if: ${{ !inputs.scan_code || inputs.skip_quality_gate }}
        run: |
          echo "::notice::SonarQube Quality Gate skipped"
          echo "quality_gate=SKIPPED" >> $GITHUB_OUTPUT

      - name: Fail on critical vulnerabilities
        run: |
          CRITICAL_COUNT=${CRITICAL_VULNS:-0}
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "::error::Found ${CRITICAL_COUNT} critical vulnerabilities!"
            echo "::error::Security scan failed due to critical vulnerabilities. Please review and fix them before proceeding."
            exit 1
          else
            echo "::notice::No critical vulnerabilities found"
          fi

      # Upload comprehensive security artifacts
      - name: Upload enhanced security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: enhanced-security-scan-results-${{ github.run_id }}
          path: |
            security-reports/
          if-no-files-found: warn
          retention-days: 90

      - name: Consolidate Quality Gate Status
        id: final-quality-gate
        if: always()
        run: |
          if [[ "${{ steps.quality-gate-check.outputs.quality_gate }}" != "" ]]; then
            echo "quality_gate=${{ steps.quality-gate-check.outputs.quality_gate }}" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.quality-gate-skipped.outputs.quality_gate }}" != "" ]]; then
            echo "quality_gate=${{ steps.quality-gate-skipped.outputs.quality_gate }}" >> $GITHUB_OUTPUT
          else
            echo "quality_gate=SKIPPED" >> $GITHUB_OUTPUT
          fi

      # Create GitHub Issue for critical vulnerabilities
      - name: Create security issue for critical vulnerabilities
        if: ${{ always() && github.event_name != 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Check if critical vulnerabilities file exists
            if (!fs.existsSync('security-reports/summary.md')) {
              console.log('No security summary found, skipping issue creation');
              return;
            }

            const summary = fs.readFileSync('security-reports/summary.md', 'utf8');
            const criticalVulns = process.env.CRITICAL_VULNS || '0';

            if (criticalVulns === '0' || criticalVulns === '') {
              console.log('No critical vulnerabilities found, skipping issue creation');
              return;
            }

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Critical Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`,
              body: `# 🚨 Critical Security Alert
              
              **${criticalVulns} critical vulnerabilities** have been detected in the repository.
              
              **Workflow Run**: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              **Branch**: ${context.ref}
              **Commit**: ${context.sha}
              
              ## Summary
              
              ${summary}
              
              ## Action Required
              
              Please review and address these vulnerabilities immediately:
              1. Check the security scan artifacts for detailed reports
              2. Update vulnerable dependencies
              3. Review and fix any code security issues
              4. Re-run the security scan to verify fixes
              
              **This issue was automatically created by the security scan workflow.**`,
              labels: ['security', 'critical', 'vulnerability']
            });
            
            console.log(`Created security issue #${issue.data.number}`);
