name: Security Scanning Module

on:
  workflow_call:
    inputs:
      project_type:
        description: "Type of project (frontend or backend)"
        required: true
        type: string
      scan_dependencies:
        description: "Scan dependencies for vulnerabilities"
        required: false
        type: boolean
        default: true
      scan_code:
        description: "Run static code analysis"
        required: false
        type: boolean
        default: true
      trivy_severity:
        description: "Trivy severity threshold"
        required: false
        type: string
        default: "HIGH,CRITICAL"
      sonar_project_key:
        description: "SonarQube project key override"
        required: false
        type: string
      skip_quality_gate:
        description: "Skip SonarQube quality gate check"
        required: false
        type: boolean
        default: false
    outputs:
      dependency_scan_results:
        description: "Dependency scan results"
        value: ${{ jobs.security-scan.outputs.dependency_scan_results }}
      sonar_quality_gate:
        description: "SonarQube quality gate status"
        value: ${{ jobs.security-scan.outputs.sonar_quality_gate }}

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-scan:
    name: Lean Security Scanning & Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      dependency_scan_results: ${{ steps.dependency-scan.outputs.results }}
      sonar_quality_gate: ${{ steps.final-quality-gate.outputs.quality_gate }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for SonarQube

      - name: Setup pnpm (for frontend)
        if: inputs.project_type == 'frontend'
        uses: pnpm/action-setup@v3
        with:
          version: "9.0.0"
          run_install: false

      - name: Setup Node.js with pnpm cache (for frontend)
        if: inputs.project_type == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies (for frontend)
        if: inputs.project_type == 'frontend'
        run: |
          if [ -f pnpm-lock.yaml ]; then
            pnpm install --frozen-lockfile --prefer-offline
          else
            pnpm install --prefer-offline
          fi

      # Quick dependency vulnerability scan
      - name: npm/pnpm audit (Quick dependency check)
        id: dependency-scan
        if: inputs.scan_dependencies && inputs.project_type == 'frontend'
        run: |
          echo "🔍 Running quick dependency vulnerability scan..."
          
          if pnpm audit --audit-level moderate --json > audit-results.json 2>/dev/null; then
            echo "✅ No significant vulnerabilities found in dependencies"
            echo "results=passed" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Vulnerabilities found in dependencies"
            echo "results=failed" >> $GITHUB_OUTPUT
            
            # Display summary
            if [ -f audit-results.json ]; then
              echo "📋 Vulnerability summary:"
              cat audit-results.json | jq -r '.metadata.vulnerabilities | to_entries[] | "- \(.key): \(.value)"' 2>/dev/null || echo "Failed to parse audit results"
            fi
          fi

      # Comprehensive vulnerability scanning with Trivy (REQUIRED)
      - name: Trivy security scanner (Comprehensive scan)
        if: inputs.scan_dependencies
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: ${{ inputs.trivy_severity }}
          exit-code: "0"
          skip-dirs: ".github,node_modules"

      - name: Upload Trivy scan results to GitHub Security tab
        if: ${{ inputs.scan_dependencies && always() && hashFiles('trivy-results.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
          category: "trivy-fs-scan"

      # SonarQube Analysis (REQUIRED - comprehensive code quality & security)
      - name: Verify SonarQube configuration
        if: inputs.scan_code
        run: |
          if [ -f sonar-project.properties ]; then
            echo "✅ Using existing SonarQube configuration"
            echo "📋 Current configuration:"
            cat sonar-project.properties
          else
            echo "⚠️ No sonar-project.properties found. SonarQube scan may use default settings."
          fi

      - name: SonarQube Scan
        id: sonar-scan
        if: inputs.scan_code
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Wait for SonarQube Quality Gate
        id: sonar-quality-gate
        if: ${{ inputs.scan_code && !inputs.skip_quality_gate }}
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Check SonarQube Quality Gate Result
        id: quality-gate-check
        if: ${{ inputs.scan_code && !inputs.skip_quality_gate }}
        run: |
          echo "SonarQube Quality Gate Status: ${{ steps.sonar-quality-gate.outputs.quality-gate-status }}"
          if [ "${{ steps.sonar-quality-gate.outputs.quality-gate-status }}" = "FAILED" ]; then
            echo "::error::SonarQube Quality Gate failed!"
            echo "quality_gate=FAILED" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "::notice::SonarQube Quality Gate passed!"
            echo "quality_gate=PASSED" >> $GITHUB_OUTPUT
          fi

      - name: Set quality gate status for skipped scans
        id: quality-gate-skipped
        if: ${{ !inputs.scan_code || inputs.skip_quality_gate }}
        run: |
          echo "::notice::SonarQube Quality Gate skipped"
          echo "quality_gate=SKIPPED" >> $GITHUB_OUTPUT

      # Security Summary
      - name: Security scan summary
        if: always()
        run: |
          echo "## 🔒 Lean Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tools Used" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.scan_dependencies }}" == "true" ]; then
            echo "- **npm/pnpm audit**: Quick dependency vulnerability check" >> $GITHUB_STEP_SUMMARY
            echo "- **Trivy**: Comprehensive filesystem and dependency scanning" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ inputs.scan_code }}" == "true" ]; then
            echo "- **SonarQube**: Code quality, security analysis, and quality gate" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.dependency-scan.outputs.results }}" == "failed" ]; then
            echo "- **Dependency Audit**: ⚠️ Issues found (see artifacts)" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.dependency-scan.outputs.results }}" == "passed" ]; then
            echo "- **Dependency Audit**: ✅ No issues" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f trivy-results.sarif ]; then
            echo "- **Trivy Scan**: 📊 Results uploaded to Security tab" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.sonar-quality-gate.outputs.quality-gate-status }}" != "" ]; then
            echo "- **SonarQube Quality Gate**: ${{ steps.sonar-quality-gate.outputs.quality-gate-status }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Why This Lean Approach?" >> $GITHUB_STEP_SUMMARY
          echo "- **Trivy**: Handles comprehensive vulnerability scanning" >> $GITHUB_STEP_SUMMARY
          echo "- **SonarQube**: Covers code quality AND security analysis" >> $GITHUB_STEP_SUMMARY
          echo "- **npm audit**: Quick dependency check for immediate feedback" >> $GITHUB_STEP_SUMMARY
          echo "- **No redundancy**: Each tool serves a unique purpose" >> $GITHUB_STEP_SUMMARY

      # Upload Security Artifacts (lean set)
      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results-${{ github.run_id }}
          path: |
            audit-results.json
            trivy-results.sarif
          if-no-files-found: ignore
          retention-days: 30

      - name: Consolidate Quality Gate Status
        id: final-quality-gate
        if: always()
        run: |
          if [[ "${{ steps.quality-gate-check.outputs.quality_gate }}" != "" ]]; then
            echo "quality_gate=${{ steps.quality-gate-check.outputs.quality_gate }}" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.quality-gate-skipped.outputs.quality_gate }}" != "" ]]; then
            echo "quality_gate=${{ steps.quality-gate-skipped.outputs.quality_gate }}" >> $GITHUB_OUTPUT
          else
            echo "quality_gate=SKIPPED" >> $GITHUB_OUTPUT
          fi