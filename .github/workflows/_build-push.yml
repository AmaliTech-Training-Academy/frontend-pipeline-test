name: Build, Version and Push Module

on:
  workflow_call:
    inputs:
      project_type:
        description: "Type of project (frontend or backend)"
        required: true
        type: string
      node_version:
        description: "Node.js version to use"
        required: false
        type: string
        default: "22.x"
      pnpm_version:
        description: "pnpm version to use"
        required: false
        type: string
        default: "9.0.0"
      build_only:
        description: "Only build the image, do not version and push"
        required: false
        type: boolean
        default: false
      push_secrets:
        description: "Push decrypted secrets to AWS Secrets Manager"
        required: false
        type: boolean
        default: false
      trivy_severity:
        description: "Trivy vulnerability scanner severity threshold"
        required: false
        type: string
        default: "HIGH,CRITICAL"
    outputs:
      image_id:
        description: "Built image ID"
        value: ${{ jobs.build-version-push.outputs.image_id }}
      image_tag:
        description: "Image tag without registry"
        value: ${{ jobs.build-version-push.outputs.image_tag }}
      version:
        description: "Generated version"
        value: ${{ jobs.build-version-push.outputs.version }}
      image_uri:
        description: "Pushed image URI"
        value: ${{ jobs.build-version-push.outputs.image_uri }}
      build_needed:
        description: "Whether build was needed and executed"
        value: ${{ jobs.check-build-needed.outputs.build_needed }}

permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  check-build-needed:
    name: Check if Build is Needed
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      build_needed: ${{ steps.analyze.outputs.build_needed }}
      skip_reason: ${{ steps.analyze.outputs.skip_reason }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze if build is needed
        id: analyze
        run: |
          BUILD_NEEDED="true"
          SKIP_REASON=""

          echo "🔍 Analyzing build requirements..."
          echo "📋 Event: ${{ github.event_name }}"
          echo "📋 Ref: ${{ github.ref }}"
          echo "📋 Branch: ${{ github.ref_name }}"
          echo "📋 Is manual trigger: ${{ github.event_name == 'workflow_dispatch' }}"

          # Skip if manual trigger (workflow_dispatch)
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            BUILD_NEEDED="false"
            SKIP_REASON="Manual trigger - build skipped by design"
            echo "⏭️ $SKIP_REASON"

          # For pull requests, analyze all commits in the PR
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "🔍 Analyzing pull request commits..."
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            
            echo "📋 PR base: $BASE_SHA"
            echo "📋 PR head: $HEAD_SHA"
            
            # Get all commits in the PR
            COMMITS=$(git log --oneline ${BASE_SHA}..${HEAD_SHA})
            echo "📋 Commits in PR:"
            echo "$COMMITS"
            
            # Analyze commit messages for build-requiring changes
            BREAKING_CHANGES=$(echo "$COMMITS" | grep -i "BREAKING CHANGE\|!" | wc -l)
            FEATURES=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ feat" | wc -l)
            FIXES=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ fix" | wc -l)
            BUILD_CHANGES=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ (build|ci)" | wc -l)
            
            echo "📊 PR Change analysis:"
            echo "  - Breaking changes: $BREAKING_CHANGES"
            echo "  - Features: $FEATURES"
            echo "  - Fixes: $FIXES"
            echo "  - Build/CI changes: $BUILD_CHANGES"
            
            # Build is needed if there are features, fixes, breaking changes, or build changes
            if [ "$BREAKING_CHANGES" -gt 0 ] || [ "$FEATURES" -gt 0 ] || [ "$FIXES" -gt 0 ] || [ "$BUILD_CHANGES" -gt 0 ]; then
              BUILD_NEEDED="true"
              echo "✅ Build needed - found changes requiring build in PR"
            else
              BUILD_NEEDED="false"
              SKIP_REASON="No build-requiring changes found in PR (only docs, chore, style, test, etc.)"
              echo "⏭️ $SKIP_REASON"
            fi

          # For push events, check target branches and commit messages
          elif [ "${{ github.event_name }}" == "push" ]; then
            TARGET_BRANCHES="main|staging|production|develop|development"
            CURRENT_BRANCH="${{ github.ref_name }}"
            
            echo "📋 Current branch: $CURRENT_BRANCH"
            echo "📋 Target branches: $TARGET_BRANCHES"
            
            # Check if pushing to target branch
            if [[ ! "$CURRENT_BRANCH" =~ ^($TARGET_BRANCHES)$ ]]; then
              BUILD_NEEDED="false"
              SKIP_REASON="Not pushing to target branch ($CURRENT_BRANCH not in: main, staging, production, develop)"
              echo "⏭️ $SKIP_REASON"
            else
              # For staging/production branches, analyze commits since base branch
              if [ "$CURRENT_BRANCH" == "staging" ]; then
                # Staging always builds to create RC versions
                echo "🔄 Staging branch detected - always build to create RC version"
                BUILD_NEEDED="true"
                
              elif [ "$CURRENT_BRANCH" == "production" ]; then
                # Production always builds to promote RC versions
                echo "� Production branch detected - always build to promote RC version"
                BUILD_NEEDED="true"
                
              else
                # For main/develop, analyze commits since last tag or recent commits
                LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
                
                if [ -n "$LAST_TAG" ]; then
                  COMMITS=$(git log ${LAST_TAG}..HEAD --oneline)
                  echo "📋 Commits since last tag ($LAST_TAG):"
                else
                  COMMITS=$(git log --oneline -10)  # Last 10 commits if no tags
                  echo "📋 Recent commits (no tags found):"
                fi
                echo "$COMMITS"
                
                # Check for build-requiring changes in main/develop branches
                BREAKING_CHANGES=$(echo "$COMMITS" | grep -i "BREAKING CHANGE\|!" | wc -l)
                FEATURES=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ feat" | wc -l)
                FIXES=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ fix" | wc -l)
                BUILD_CHANGES=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ (build|ci)" | wc -l)
                
                echo "📊 Change analysis:"
                echo "  - Breaking changes: $BREAKING_CHANGES"
                echo "  - Features: $FEATURES" 
                echo "  - Fixes: $FIXES"
                echo "  - Build/CI changes: $BUILD_CHANGES"
                
                # Build is needed if there are features, fixes, breaking changes, or build changes
                if [ "$BREAKING_CHANGES" -gt 0 ] || [ "$FEATURES" -gt 0 ] || [ "$FIXES" -gt 0 ] || [ "$BUILD_CHANGES" -gt 0 ]; then
                  BUILD_NEEDED="true"
                  echo "✅ Build needed - found changes requiring build"
                else
                  BUILD_NEEDED="false"
                  SKIP_REASON="No build-requiring changes found (only docs, chore, style, test, etc.)"
                  echo "⏭️ $SKIP_REASON"
                fi
              fi
            fi
          fi

          echo "🎯 Final decision: BUILD_NEEDED=$BUILD_NEEDED"
          if [ "$BUILD_NEEDED" == "false" ]; then
            echo "📝 Reason: $SKIP_REASON"
          fi

          echo "build_needed=$BUILD_NEEDED" >> $GITHUB_OUTPUT
          echo "skip_reason=$SKIP_REASON" >> $GITHUB_OUTPUT

  build-version-push:
    name: Build, Version & Push Container Image
    runs-on: ubuntu-latest
    needs: [check-build-needed]
    if: ${{ needs.check-build-needed.outputs.build_needed == 'true' }}
    timeout-minutes: 45
    environment: ${{ github.ref == 'refs/heads/production' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || 'development' }}
    outputs:
      image_id: ${{ steps.build.outputs.imageid }}
      image_tag: cloudinsight-frontend:${{ github.sha }}
      version: ${{ steps.version.outputs.new_version }}
      image_uri: ${{ steps.push.outputs.image_uri }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build justification
        run: |
          echo "🚀 Build is proceeding based on analysis:"
          echo "📋 Event: ${{ github.event_name }}"
          echo "📋 Branch: ${{ github.ref_name }}"
          echo "✅ Build required - proceeding with container build and deployment"

      - name: Debug git state for troubleshooting
        run: |
          echo "🔍 Git state debugging:"
          echo "📋 Current branch: $(git branch --show-current)"
          echo "📋 Remote branches:"
          git branch -r | head -10
          echo "📋 Recent commits (last 5):"
          git log --oneline -5
          echo "📋 Last tag: $(git describe --tags --abbrev=0 2>/dev/null || echo 'No tags found')"

      - name: Setup pnpm
        if: inputs.project_type == 'frontend'
        uses: pnpm/action-setup@v3
        with:
          version: ${{ inputs.pnpm_version }}
          run_install: false

      - name: Setup Node.js with pnpm cache
        if: inputs.project_type == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      - name: Decrypt environment variables
        id: decrypt-env
        run: |
          echo "🔍 Checking for encrypted environment files..."

          # Find encrypted files in repository root
          ENCRYPTED_DATA=$(find . -maxdepth 1 -name "encrypted-env-vars.enc" -type f | head -1)
          ENCRYPTED_KEY=$(find . -maxdepth 1 -name "encrypted-aes-key.enc" -type f | head -1)
          METADATA=$(find . -maxdepth 1 -name "encrypted-env-vars.meta" -type f | head -1)

          if [[ -z "$ENCRYPTED_DATA" || -z "$ENCRYPTED_KEY" ]]; then
            echo "ℹ️ No encrypted environment files found - continuing without decryption"
            echo "has_encrypted_env=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "✅ Found encrypted files:"
          echo "  Data: $ENCRYPTED_DATA"
          echo "  Key: $ENCRYPTED_KEY"
          if [[ -n "$METADATA" ]]; then
            echo "  Metadata: $METADATA"
          fi
          echo "has_encrypted_env=true" >> $GITHUB_OUTPUT

          # Create private key from secret
          echo "🔑 Setting up private key for decryption..."
          echo "${{ secrets.TEAM_PRIVATE_KEY }}" > ./team-private-key.pem
          chmod 600 ./team-private-key.pem

          # Verify private key
          if ! openssl rsa -in ./team-private-key.pem -check -noout; then
            echo "❌ Invalid private key in TEAM_PRIVATE_KEY secret"
            exit 1
          fi
          echo "✅ Private key validated"

          # Show metadata if available (without sensitive content)
          if [[ -n "$METADATA" && -f "$METADATA" ]]; then
            echo "📋 Encryption Metadata:"
            echo "======================="
            cat "$METADATA"
            echo "======================="
          fi

          # Decrypt AES key
          echo "🔓 Decrypting AES key..."
          if ! openssl rsautl -decrypt \
            -inkey ./team-private-key.pem \
            -in "$ENCRYPTED_KEY" \
            -out ./temp-aes-key; then
            echo "❌ Failed to decrypt AES key"
            exit 1
          fi

          # Read AES key
          AES_KEY=$(cat ./temp-aes-key)

          # Decrypt data (try GCM first, then CBC)
          echo "🔓 Decrypting environment data..."
          if openssl enc -aes-256-gcm -d \
            -in "$ENCRYPTED_DATA" \
            -out "./.env" \
            -pass "pass:$AES_KEY" 2>/dev/null; then
            echo "✅ Decrypted with AES-GCM"
          elif openssl enc -aes-256-cbc -d \
            -in "$ENCRYPTED_DATA" \
            -out "./.env" \
            -pass "pass:$AES_KEY" 2>/dev/null; then
            echo "✅ Decrypted with AES-CBC"
          else
            echo "❌ Decryption failed with both AES-GCM and AES-CBC"
            exit 1
          fi

          # Verify decrypted content (without exposing content)
          if [[ -f "./.env" ]]; then
            LINES=$(wc -l < "./.env")
            SIZE=$(stat -c%s "./.env")
            echo "✅ Decryption completed successfully!"
            echo "📋 Decrypted .env file: $LINES lines, $SIZE bytes"
            echo "⚠️ Environment variables are available for build process only"
            
            # Ensure .env is not tracked by git
            git add .gitignore 2>/dev/null || true
            
            # Clean up temporary key files (keep .env for later steps)
            rm -f ./team-private-key.pem ./temp-aes-key
            echo "🧹 Cleaned up temporary key files"
          else
            echo "❌ Decryption produced no output file"
            exit 1
          fi

      - name: Extract NEXT_PUBLIC environment variables
        id: extract-env
        if: steps.decrypt-env.outputs.has_encrypted_env == 'true'
        run: |
          echo "🔍 Extracting NEXT_PUBLIC_* environment variables..."

          if [[ ! -f "./.env" ]]; then
            exit 0
          fi

          # Extract NEXT_PUBLIC_* variables (without exposing values in logs)
          NEXT_PUBLIC_VARS=$(grep '^NEXT_PUBLIC_' ./.env 2>/dev/null || true)

          if [[ -z "$NEXT_PUBLIC_VARS" ]]; then
            echo "ℹ️ No NEXT_PUBLIC_* variables found"
            echo "has_next_public_vars=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Count variables found (without showing values)
          VAR_COUNT=$(echo "$NEXT_PUBLIC_VARS" | wc -l)
          echo "✅ Found $VAR_COUNT NEXT_PUBLIC_* environment variables"
          echo "has_next_public_vars=true" >> $GITHUB_OUTPUT

          # Mask sensitive values in logs
          echo "$NEXT_PUBLIC_VARS" | while IFS='=' read -r key value; do
            if [[ -n "$value" ]]; then
              echo "::add-mask::$value"
            fi
          done

          # Save build args to output file (will be masked)
          echo "$NEXT_PUBLIC_VARS" > ./next-public-build-args.txt

          echo "🔒 Environment variables prepared for Docker build (values masked in logs)"

      - name: Configure AWS credentials
        if: ${{ inputs.push_secrets || !inputs.build_only }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Push secrets to AWS Secrets Manager
        if: ${{ inputs.push_secrets && steps.decrypt-env.outputs.has_encrypted_env == 'true' }}
        run: |
          echo "🔐 Pushing secrets to AWS Secrets Manager..."

          if [[ ! -f "./.env" ]]; then
            echo "⚠️ No .env file found - skipping secrets push"
            exit 0
          fi

          # Use environment-scoped secret name (no suffix needed)
          SECRET_NAME="${{ secrets.AWS_SECRETS_MANAGER_SECRET_NAME }}"

          if [[ -z "$SECRET_NAME" ]]; then
            echo "❌ AWS_SECRETS_MANAGER_SECRET_NAME environment secret not configured"
            exit 1
          fi

          echo "🌍 Target Environment: ${{ github.ref }}"
          echo "🔐 Secret Name: $SECRET_NAME"

          # Create JSON from .env file
          echo "📝 Creating JSON from .env file..."

          # Create a temporary file to build JSON properly
          JSON_TEMP_FILE=$(mktemp)
          echo "{" > "$JSON_TEMP_FILE"

          # Process .env file line by line
          while IFS='=' read -r key value; do
            # Skip comments and empty lines
            if [[ "$key" =~ ^[[:space:]]*# ]] || [[ -z "$key" ]] || [[ -z "$value" ]]; then
              continue
            fi
            
            # Remove any trailing carriage return or whitespace
            key=$(echo "$key" | tr -d '\r' | xargs)
            value=$(echo "$value" | tr -d '\r')
            
            # Escape quotes in the value and add to JSON
            escaped_value=$(echo "$value" | sed 's/"/\\"/g')
            echo "  \"$key\": \"$escaped_value\"," >> "$JSON_TEMP_FILE"
          done < ./.env

          # Remove the last comma and close the JSON
          sed -i '$ s/,$//' "$JSON_TEMP_FILE"
          echo "}" >> "$JSON_TEMP_FILE"

          # Read the complete JSON
          NEW_SECRET_JSON=$(cat "$JSON_TEMP_FILE")
          rm -f "$JSON_TEMP_FILE"

          # Validate JSON syntax
          if ! echo "$NEW_SECRET_JSON" | jq empty 2>/dev/null; then
            echo "❌ Generated invalid JSON from .env file"
            echo "Generated JSON: $NEW_SECRET_JSON"
            exit 1
          fi

          echo "✅ Valid JSON created from .env file"

          # Always use merge strategy - assume secret exists
          echo "🔄 Implementing merge strategy for existing secret..."

          # Get existing secret
          echo "📄 Retrieving existing secret: $SECRET_NAME"
          EXISTING_SECRET=$(aws secretsmanager get-secret-value --secret-id "$SECRET_NAME" --query SecretString --output text)

          if [[ -z "$EXISTING_SECRET" ]]; then
            echo "❌ Failed to retrieve existing secret or secret is empty"
            exit 1
          fi

          # Validate existing secret JSON
          if ! echo "$EXISTING_SECRET" | jq empty 2>/dev/null; then
            echo "❌ Existing secret contains invalid JSON"
            exit 1
          fi
          echo "✅ Existing secret JSON is valid"

          # Merge existing and new secrets using jq
          echo "🔀 Merging new values with existing secret (preserving untouched variables)..."
          MERGED_SECRET=$(echo "$EXISTING_SECRET" | jq --argjson new "$NEW_SECRET_JSON" '. + $new')

          if [[ -z "$MERGED_SECRET" ]]; then
            echo "❌ Failed to merge secrets"
            exit 1
          fi
          echo "✅ Secrets merged successfully"

          # Update secret with merged values
          echo "✅ Updating secret with merged values..."
          aws secretsmanager update-secret \
            --secret-id "$SECRET_NAME" \
            --secret-string "$MERGED_SECRET"
            
          echo "📊 Merge completed successfully - existing values preserved, only specified values updated"

          echo "🎯 Secrets deployment completed for: $SECRET_NAME"

      - name: Login to Amazon ECR
        if: ${{ !inputs.build_only }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          # Use single platform for local builds to enable image loading and scanning
          # Multi-platform builds with push:false don't load into local Docker daemon
          platforms: linux/amd64
          push: false
          load: true # Required for Trivy to access the built image locally
          tags: cloudinsight-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ${{ steps.extract-env.outputs.has_next_public_vars == 'true' && 
                format('BUILDTIME_ENV_FILE={0}', 'next-public-build-args.txt') || '' }}
            NODE_ENV=production
            COMMIT_SHA=${{ github.sha }}

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: cloudinsight-frontend:${{ github.sha }}
          format: "sarif"
          output: "trivy-image-results.sarif"
          severity: ${{ inputs.trivy_severity }}

      - name: Upload Trivy scan results
        if: always()
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-image-results.sarif"

      - name: Check SARIF file (for debugging)
        if: always()
        run: |
          if [ -f "trivy-image-results.sarif" ]; then
            echo "✅ SARIF file exists:"
            ls -la trivy-image-results.sarif
            echo "📋 SARIF file size: $(stat -c%s trivy-image-results.sarif) bytes"
            echo "🔍 First few lines of SARIF:"
            head -20 trivy-image-results.sarif
          else
            echo "❌ SARIF file not found"
          fi

      # Versioning and Push steps (only run if not build_only mode)
      - name: Analyze commit messages
        if: ${{ !inputs.build_only && steps.build.outcome == 'success' }}
        id: analyze-commits
        run: |
          echo "🔍 Analyzing commit messages for semantic versioning..."

          # Get the latest tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          # Determine commit range to analyze
          if [ -n "$LAST_TAG" ]; then
            COMMIT_RANGE="${LAST_TAG}..HEAD"
            echo "📋 Analyzing commits since last tag: $LAST_TAG"
          else
            # If no tags, analyze last 10 commits to avoid too much noise
            COMMIT_RANGE="HEAD~10..HEAD"
            echo "📋 No tags found, analyzing recent commits"
          fi

          # Check if this is a merge commit (typical in PR merges)
          MERGE_COMMIT=$(git log --oneline -1 --merges HEAD)
          if [ -n "$MERGE_COMMIT" ]; then
            echo "🔀 Detected merge commit: $MERGE_COMMIT"
            
            # For merge commits, get the merge base and analyze all commits in the merged branch
            MERGE_BASE=$(git merge-base HEAD~1 HEAD~2 2>/dev/null || git merge-base HEAD~1 HEAD^2 2>/dev/null || echo "")
            if [ -n "$MERGE_BASE" ]; then
              # Analyze commits from the merged branch (excluding the merge commit itself)
              COMMIT_RANGE="${MERGE_BASE}..HEAD^2"
              echo "📋 Analyzing merged branch commits: $COMMIT_RANGE"
            else
              echo "⚠️ Could not determine merge base, falling back to default range"
            fi
          fi

          # Get all commit messages in the range
          echo "📝 Fetching commits in range: $COMMIT_RANGE"
          COMMITS=$(git log $COMMIT_RANGE --pretty=format:"%s" 2>/dev/null || git log --oneline -5 --pretty=format:"%s")

          if [ -z "$COMMITS" ]; then
            echo "⚠️ No commits found in range, analyzing last commit"
            COMMITS=$(git log -1 --pretty=format:"%s")
          fi

          echo "📋 Found commits:"
          echo "$COMMITS" | while read commit; do echo "  - $commit"; done

          # Analyze commit messages for semantic versioning patterns
          BREAKING_CHANGES=0
          FEATURES=0
          FIXES=0

          while IFS= read -r commit; do
            [ -z "$commit" ] && continue
            
            echo "🔍 Analyzing: $commit"
            
            # Check for breaking changes (BREAKING CHANGE or ! in type)
            if echo "$commit" | grep -qiE "(BREAKING CHANGE|^[^:]+!:|^[^(]+\([^)]*\)!:)"; then
              echo "  💥 Breaking change detected"
              BREAKING_CHANGES=$((BREAKING_CHANGES + 1))
            # Check for features
            elif echo "$commit" | grep -qE "^feat(\([^)]*\))?:"; then
              echo "  ✨ Feature detected"
              FEATURES=$((FEATURES + 1))
            # Check for fixes
            elif echo "$commit" | grep -qE "^fix(\([^)]*\))?:"; then
              echo "  🐛 Fix detected"
              FIXES=$((FIXES + 1))
            # Check for other build-worthy changes
            elif echo "$commit" | grep -qE "^(build|ci|perf|refactor)(\([^)]*\))?:"; then
              echo "  🔧 Build/CI change detected"
              FIXES=$((FIXES + 1))  # Treat as patch-level change
            else
              echo "  📝 Other commit (no version impact)"
            fi
          done <<< "$COMMITS"

          # Determine version bump
          if [ "$BREAKING_CHANGES" -gt 0 ]; then
            SUGGESTED_BUMP="major"
            echo "🚀 Suggested bump: MAJOR (breaking changes: $BREAKING_CHANGES)"
          elif [ "$FEATURES" -gt 0 ]; then
            SUGGESTED_BUMP="minor"
            echo "🚀 Suggested bump: MINOR (features: $FEATURES)"
          elif [ "$FIXES" -gt 0 ]; then
            SUGGESTED_BUMP="patch"
            echo "🚀 Suggested bump: PATCH (fixes/improvements: $FIXES)"
          else
            SUGGESTED_BUMP="patch"
            echo "🚀 Suggested bump: PATCH (default - no semantic commits found)"
          fi

          echo "suggested_bump=$SUGGESTED_BUMP" >> $GITHUB_OUTPUT

      - name: Calculate version
        if: ${{ !inputs.build_only && steps.build.outcome == 'success' }}
        id: version
        run: |
          # Get the latest tag from git
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -n "$LATEST_TAG" ]; then
            CURRENT_VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')
            echo "📋 Latest git tag: $LATEST_TAG (version: $CURRENT_VERSION)"
          else
            # No tags exist, start with default version
            CURRENT_VERSION="0.0.0"
            echo "📋 No git tags found, starting with default version: $CURRENT_VERSION"
          fi

          # Handle branch-specific versioning strategies
          if [ "${{ github.ref_name }}" == "staging" ]; then
            # Staging: Use latest tag + '-rc' (no version calculations)
            echo "🔄 Staging branch detected - using latest tag with RC suffix"
            if [ -n "$LATEST_TAG" ]; then
              # Remove any existing -rc suffix and add new one
              BASE_VERSION=$(echo "$LATEST_TAG" | sed 's/^v//' | sed 's/-rc$//')
              NEW_VERSION="$BASE_VERSION-rc"
            else
              NEW_VERSION="0.1.0-rc"
              echo "📋 No existing tags, starting with 0.1.0-rc"
            fi
            NEW_TAG="v$NEW_VERSION"
            
          elif [ "${{ github.ref_name }}" == "production" ]; then
            # Production: Find latest RC tag and promote it (no calculations)
            echo "🚀 Production branch detected - looking for latest RC tag to promote"
            
            # Find the latest RC tag
            LATEST_RC_TAG=$(git tag -l "v*-rc" | sort -V | tail -n1)
            
            if [ -z "$LATEST_RC_TAG" ]; then
              echo "❌ No RC tags found for production promotion"
              echo "💡 Deploy to staging first to create an RC tag"
              exit 1
            fi
            
            # Extract base version from RC tag and check if it's v1.x.x+
            RC_VERSION=$(echo "$LATEST_RC_TAG" | sed 's/^v//' | sed 's/-rc$//')
            IFS='.' read -ra RC_PARTS <<< "$RC_VERSION"
            RC_MAJOR=${RC_PARTS[0]:-0}
            
            if [ "$RC_MAJOR" -eq 0 ]; then
              echo "❌ Production deployment blocked: Cannot deploy v0.x.x versions to production"
              echo "� Found RC tag: $LATEST_RC_TAG (v0.x.x not allowed in production)"
              echo "💡 Versions must be v1.x.x or higher for production deployment"
              echo "📋 This restriction exists because we're still in v0.x.x development phase"
              exit 1
            fi
            
            NEW_VERSION="$RC_VERSION"
            NEW_TAG="v$NEW_VERSION"
            echo "✅ Promoting RC tag $LATEST_RC_TAG to production version $NEW_TAG"
            
          else
            # Development/main branches: Calculate new versions
            echo "� Development branch detected - calculating new version"
            
            # Parse version components
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]:-0}
            MINOR=${VERSION_PARTS[1]:-0}
            PATCH=${VERSION_PARTS[2]:-0}

            BUMP_TYPE="${{ steps.analyze-commits.outputs.suggested_bump }}"
            echo "📋 Suggested bump type: $BUMP_TYPE"

            # Calculate new version
            case "$BUMP_TYPE" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac

            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            NEW_TAG="v$NEW_VERSION"

            # Check if the calculated tag already exists
            if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
              echo "⚠️ Tag $NEW_TAG already exists, force bumping patch version"
              PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              NEW_TAG="v$NEW_VERSION"
            fi
          fi

          echo "🏷️ Calculated new version: $NEW_VERSION (bump: $BUMP_TYPE)"
          echo "🏷️ New tag will be: $NEW_TAG"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Tag and push image to ECR
        if: ${{ !inputs.build_only && steps.build.outcome == 'success' }}
        id: push
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY="${{ secrets.ECR_REPOSITORY_NAME }}"
          VERSION_TAG="v${{ steps.version.outputs.new_version }}"
          COMMIT_TAG=${{ github.sha }}

          echo "🔍 Checking if ECR repository exists..."
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY 2>/dev/null || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY

          echo "🏷️ Tagging image for ECR push..."
          docker tag cloudinsight-frontend:$COMMIT_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG
          docker tag cloudinsight-frontend:$COMMIT_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "📤 Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG"
          echo "✅ Successfully pushed image to ECR: $IMAGE_URI"
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Create git tag (only after successful ECR push)
        if: ${{ !inputs.build_only && steps.push.outcome == 'success' }}
        run: |
          TAG_NAME="v${{ steps.version.outputs.new_version }}"
          echo "🏷️ Creating git tag: $TAG_NAME"

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin "$TAG_NAME"

          echo "✅ Successfully created and pushed git tag: $TAG_NAME"

      - name: Create GitHub Release
        if: ${{ !inputs.build_only && steps.push.outcome == 'success' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body: |
            CloudInsight Frontend Release v${{ steps.version.outputs.new_version }}

            🐳 **Container Image:** ${{ steps.push.outputs.image_uri }}
            📝 **Commit:** ${{ github.sha }}
            🔄 **Bump Type:** ${{ steps.analyze-commits.outputs.suggested_bump }}
          draft: false
          prerelease: false

      - name: Build and deployment summary
        if: always()
        run: |
          echo "## 🐳 Build & Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Project Type:** ${{ inputs.project_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag:** cloudinsight-frontend:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Only:** ${{ inputs.build_only }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Push Secrets:** ${{ inputs.push_secrets }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.build.outcome }}" == "success" ]; then
            echo "- **Build Status:** ✅ Build successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Build Status:** ❌ Build failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ inputs.build_only }}" == "false" ]; then
            if [ "${{ steps.build.outcome }}" == "success" ]; then
              echo "- **Version:** ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
              
              if [ "${{ steps.push.outcome }}" == "success" ]; then
                echo "- **ECR Push:** ✅ Pushed to ECR" >> $GITHUB_STEP_SUMMARY
                echo "- **Image URI:** ${{ steps.push.outputs.image_uri }}" >> $GITHUB_STEP_SUMMARY
                echo "- **Git Tag:** ✅ Created v${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
                echo "- **GitHub Release:** ✅ Created" >> $GITHUB_STEP_SUMMARY
              else
                echo "- **ECR Push:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
                echo "- **Git Tag:** ⏭️ Skipped (ECR push failed)" >> $GITHUB_STEP_SUMMARY
                echo "- **GitHub Release:** ⏭️ Skipped (ECR push failed)" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "- **Version:** ⏭️ Skipped (build failed)" >> $GITHUB_STEP_SUMMARY
              echo "- **ECR Push:** ⏭️ Skipped (build failed)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Version:** ⏭️ Skipped (build only mode)" >> $GITHUB_STEP_SUMMARY
            echo "- **ECR Push:** ⏭️ Skipped (build only mode)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Security cleanup
        if: always()
        run: |
          echo "🧹 Performing security cleanup..."
          rm -f ./team-private-key.pem ./temp-aes-key ./.env ./next-public-build-args.txt
          echo "✅ Security cleanup completed"

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [check-build-needed, build-version-push]
    if: always()
    steps:
      - name: Generate build summary
        run: |
          echo "## 🏗️ Build Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          BUILD_NEEDED="${{ needs.check-build-needed.outputs.build_needed }}"
          SKIP_REASON="${{ needs.check-build-needed.outputs.skip_reason }}"
          BUILD_RESULT="${{ needs.build-version-push.result }}"

          if [ "$BUILD_NEEDED" == "true" ]; then
            echo "✅ **Build Required**: Yes" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **Reason**: Changes detected that require container rebuild" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "$BUILD_RESULT" == "success" ]; then
              echo "🚀 **Build Result**: ✅ Successfully completed" >> $GITHUB_STEP_SUMMARY
              if [ "${{ needs.build-version-push.outputs.version }}" != "" ]; then
                echo "🏷️ **Version**: ${{ needs.build-version-push.outputs.version }}" >> $GITHUB_STEP_SUMMARY
              fi
              if [ "${{ needs.build-version-push.outputs.image_uri }}" != "" ]; then
                echo "📦 **Image**: ${{ needs.build-version-push.outputs.image_uri }}" >> $GITHUB_STEP_SUMMARY
              fi
            elif [ "$BUILD_RESULT" == "failure" ]; then
              echo "🚀 **Build Result**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
            elif [ "$BUILD_RESULT" == "cancelled" ]; then
              echo "🚀 **Build Result**: ⏹️ Cancelled" >> $GITHUB_STEP_SUMMARY
            else
              echo "🚀 **Build Result**: ⏭️ Skipped" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **Build Required**: No" >> $GITHUB_STEP_SUMMARY
            echo "📝 **Reason**: $SKIP_REASON" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "💡 **What triggers a build?**" >> $GITHUB_STEP_SUMMARY
            echo "- Push to main/staging/production branches" >> $GITHUB_STEP_SUMMARY
            echo "- Commit messages with: feat:, fix:, BREAKING CHANGE, build:, ci:" >> $GITHUB_STEP_SUMMARY
            echo "- NOT manual triggers or pull requests" >> $GITHUB_STEP_SUMMARY
          fi
