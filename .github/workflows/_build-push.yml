name: Build, Version and Push Module

on:
  workflow_call:
    inputs:
      project_type:
        description: "Type of project (frontend or backend)"
        required: true
        type: string
      node_version:
        description: "Node.js version to use"
        required: false
        type: string
        default: "22.x"
      pnpm_version:
        description: "pnpm version to use"
        required: false
        type: string
        default: "9.0.0"
      build_only:
        description: "Only build the image, do not version and push"
        required: false
        type: boolean
        default: false
      push_secrets:
        description: "Push decrypted secrets to AWS Secrets Manager"
        required: false
        type: boolean
        default: false
    outputs:
      image_id:
        description: "Built image ID"
        value: ${{ jobs.build-version-push.outputs.image_id }}
      image_tag:
        description: "Image tag without registry"
        value: ${{ jobs.build-version-push.outputs.image_tag }}
      version:
        description: "Generated version"
        value: ${{ jobs.build-version-push.outputs.version }}
      image_uri:
        description: "Pushed image URI"
        value: ${{ jobs.build-version-push.outputs.image_uri }}

permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  build-version-push:
    name: Build, Version & Push Container Image
    runs-on: ubuntu-latest
    timeout-minutes: 45
    environment: ${{ github.ref == 'refs/heads/production' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || 'development' }}
    outputs:
      image_id: ${{ steps.build.outputs.imageid }}
      image_tag: cloudinsight-frontend:${{ github.sha }}
      version: ${{ steps.version.outputs.new_version }}
      image_uri: ${{ steps.push.outputs.image_uri }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        if: inputs.project_type == 'frontend'
        uses: pnpm/action-setup@v3
        with:
          version: ${{ inputs.pnpm_version }}
          run_install: false

      - name: Setup Node.js with pnpm cache
        if: inputs.project_type == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      - name: Decrypt environment variables
        id: decrypt-env
        run: |
          echo "üîç Checking for encrypted environment files..."

          # Find encrypted files in repository root
          ENCRYPTED_DATA=$(find . -maxdepth 1 -name "encrypted-env-vars.enc" -type f | head -1)
          ENCRYPTED_KEY=$(find . -maxdepth 1 -name "encrypted-aes-key.enc" -type f | head -1)
          METADATA=$(find . -maxdepth 1 -name "encrypted-env-vars.meta" -type f | head -1)

          if [[ -z "$ENCRYPTED_DATA" || -z "$ENCRYPTED_KEY" ]]; then
            echo "‚ÑπÔ∏è No encrypted environment files found - continuing without decryption"
            echo "has_encrypted_env=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "‚úÖ Found encrypted files:"
          echo "  Data: $ENCRYPTED_DATA"
          echo "  Key: $ENCRYPTED_KEY"
          if [[ -n "$METADATA" ]]; then
            echo "  Metadata: $METADATA"
          fi
          echo "has_encrypted_env=true" >> $GITHUB_OUTPUT

          # Create private key from secret
          echo "üîë Setting up private key for decryption..."
          echo "${{ secrets.TEAM_PRIVATE_KEY }}" > ./team-private-key.pem
          chmod 600 ./team-private-key.pem

          # Verify private key
          if ! openssl rsa -in ./team-private-key.pem -check -noout; then
            echo "‚ùå Invalid private key in TEAM_PRIVATE_KEY secret"
            exit 1
          fi
          echo "‚úÖ Private key validated"

          # Show metadata if available (without sensitive content)
          if [[ -n "$METADATA" && -f "$METADATA" ]]; then
            echo "üìã Encryption Metadata:"
            echo "======================="
            cat "$METADATA"
            echo "======================="
          fi

          # Decrypt AES key
          echo "üîì Decrypting AES key..."
          if ! openssl rsautl -decrypt \
            -inkey ./team-private-key.pem \
            -in "$ENCRYPTED_KEY" \
            -out ./temp-aes-key; then
            echo "‚ùå Failed to decrypt AES key"
            exit 1
          fi

          # Read AES key
          AES_KEY=$(cat ./temp-aes-key)

          # Decrypt data (try GCM first, then CBC)
          echo "üîì Decrypting environment data..."
          if openssl enc -aes-256-gcm -d \
            -in "$ENCRYPTED_DATA" \
            -out "./.env" \
            -pass "pass:$AES_KEY" 2>/dev/null; then
            echo "‚úÖ Decrypted with AES-GCM"
          elif openssl enc -aes-256-cbc -d \
            -in "$ENCRYPTED_DATA" \
            -out "./.env" \
            -pass "pass:$AES_KEY" 2>/dev/null; then
            echo "‚úÖ Decrypted with AES-CBC"
          else
            echo "‚ùå Decryption failed with both AES-GCM and AES-CBC"
            exit 1
          fi

          # Verify decrypted content (without exposing content)
          if [[ -f "./.env" ]]; then
            LINES=$(wc -l < "./.env")
            SIZE=$(stat -c%s "./.env")
            echo "‚úÖ Decryption completed successfully!"
            echo "üìã Decrypted .env file: $LINES lines, $SIZE bytes"
            echo "‚ö†Ô∏è Environment variables are available for build process only"
            
            # Ensure .env is not tracked by git
            git add .gitignore 2>/dev/null || true
            
            # Clean up temporary key files (keep .env for later steps)
            rm -f ./team-private-key.pem ./temp-aes-key
            echo "üßπ Cleaned up temporary key files"
          else
            echo "‚ùå Decryption produced no output file"
            exit 1
          fi

      - name: Extract NEXT_PUBLIC environment variables
        id: extract-env
        if: steps.decrypt-env.outputs.has_encrypted_env == 'true'
        run: |
          echo "üîç Extracting NEXT_PUBLIC_* environment variables..."

          if [[ ! -f "./.env" ]]; then
            exit 0
          fi

          # Extract NEXT_PUBLIC_* variables (without exposing values in logs)
          NEXT_PUBLIC_VARS=$(grep '^NEXT_PUBLIC_' ./.env 2>/dev/null || true)

          if [[ -z "$NEXT_PUBLIC_VARS" ]]; then
            echo "‚ÑπÔ∏è No NEXT_PUBLIC_* variables found"
            echo "has_next_public_vars=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Count variables found (without showing values)
          VAR_COUNT=$(echo "$NEXT_PUBLIC_VARS" | wc -l)
          echo "‚úÖ Found $VAR_COUNT NEXT_PUBLIC_* environment variables"
          echo "has_next_public_vars=true" >> $GITHUB_OUTPUT

          # Mask sensitive values in logs
          echo "$NEXT_PUBLIC_VARS" | while IFS='=' read -r key value; do
            if [[ -n "$value" ]]; then
              echo "::add-mask::$value"
            fi
          done

          # Save build args to output file (will be masked)
          echo "$NEXT_PUBLIC_VARS" > ./next-public-build-args.txt

          echo "üîí Environment variables prepared for Docker build (values masked in logs)"

      - name: Configure AWS credentials
        if: ${{ inputs.push_secrets || !inputs.build_only }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Push secrets to AWS Secrets Manager
        if: ${{ inputs.push_secrets && steps.decrypt-env.outputs.has_encrypted_env == 'true' }}
        run: |
          echo "üîê Pushing secrets to AWS Secrets Manager..."

          if [[ ! -f "./.env" ]]; then
            echo "‚ö†Ô∏è No .env file found - skipping secrets push"
            exit 0
          fi

          # Use environment-scoped secret name (no suffix needed)
          SECRET_NAME="${{ secrets.AWS_SECRETS_MANAGER_SECRET_NAME }}"

          if [[ -z "$SECRET_NAME" ]]; then
            echo "‚ùå AWS_SECRETS_MANAGER_SECRET_NAME environment secret not configured"
            exit 1
          fi

          echo "üåç Target Environment: ${{ github.ref }}"
          echo "üîê Secret Name: $SECRET_NAME"

          # Create JSON from .env file
          echo "üìù Creating JSON from .env file..."

          # Create a temporary file to build JSON properly
          JSON_TEMP_FILE=$(mktemp)
          echo "{" > "$JSON_TEMP_FILE"

          # Process .env file line by line
          while IFS='=' read -r key value; do
            # Skip comments and empty lines
            if [[ "$key" =~ ^[[:space:]]*# ]] || [[ -z "$key" ]] || [[ -z "$value" ]]; then
              continue
            fi
            
            # Remove any trailing carriage return or whitespace
            key=$(echo "$key" | tr -d '\r' | xargs)
            value=$(echo "$value" | tr -d '\r')
            
            # Escape quotes in the value and add to JSON
            escaped_value=$(echo "$value" | sed 's/"/\\"/g')
            echo "  \"$key\": \"$escaped_value\"," >> "$JSON_TEMP_FILE"
          done < ./.env

          # Remove the last comma and close the JSON
          sed -i '$ s/,$//' "$JSON_TEMP_FILE"
          echo "}" >> "$JSON_TEMP_FILE"

          # Read the complete JSON
          NEW_SECRET_JSON=$(cat "$JSON_TEMP_FILE")
          rm -f "$JSON_TEMP_FILE"

          # Validate JSON syntax
          if ! echo "$NEW_SECRET_JSON" | jq empty 2>/dev/null; then
            echo "‚ùå Generated invalid JSON from .env file"
            echo "Generated JSON: $NEW_SECRET_JSON"
            exit 1
          fi

          echo "‚úÖ Valid JSON created from .env file"

          # Always use merge strategy - assume secret exists
          echo "üîÑ Implementing merge strategy for existing secret..."

          # Get existing secret
          echo "üìÑ Retrieving existing secret: $SECRET_NAME"
          EXISTING_SECRET=$(aws secretsmanager get-secret-value --secret-id "$SECRET_NAME" --query SecretString --output text)

          if [[ -z "$EXISTING_SECRET" ]]; then
            echo "‚ùå Failed to retrieve existing secret or secret is empty"
            exit 1
          fi

          # Validate existing secret JSON
          if ! echo "$EXISTING_SECRET" | jq empty 2>/dev/null; then
            echo "‚ùå Existing secret contains invalid JSON"
            exit 1
          fi
          echo "‚úÖ Existing secret JSON is valid"

          # Merge existing and new secrets using jq
          echo "üîÄ Merging new values with existing secret (preserving untouched variables)..."
          MERGED_SECRET=$(echo "$EXISTING_SECRET" | jq --argjson new "$NEW_SECRET_JSON" '. + $new')

          if [[ -z "$MERGED_SECRET" ]]; then
            echo "‚ùå Failed to merge secrets"
            exit 1
          fi
          echo "‚úÖ Secrets merged successfully"

          # Update secret with merged values
          echo "‚úÖ Updating secret with merged values..."
          aws secretsmanager update-secret \
            --secret-id "$SECRET_NAME" \
            --secret-string "$MERGED_SECRET"
            
          echo "üìä Merge completed successfully - existing values preserved, only specified values updated"

          echo "üéØ Secrets deployment completed for: $SECRET_NAME"

      - name: Login to Amazon ECR
        if: ${{ !inputs.build_only }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          # Use single platform for local builds to enable image loading and scanning
          # Multi-platform builds with push:false don't load into local Docker daemon
          platforms: linux/amd64
          push: false
          load: true # Required for Trivy to access the built image locally
          tags: cloudinsight-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ${{ steps.extract-env.outputs.has_next_public_vars == 'true' && 
                format('BUILDTIME_ENV_FILE={0}', 'next-public-build-args.txt') || '' }}
            NODE_ENV=production
            COMMIT_SHA=${{ github.sha }}

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: cloudinsight-frontend:${{ github.sha }}
          format: "sarif"
          output: "trivy-image-results.sarif"

      - name: Upload Trivy scan results
        if: always()
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-image-results.sarif"

      - name: Check SARIF file (for debugging)
        if: always()
        run: |
          if [ -f "trivy-image-results.sarif" ]; then
            echo "‚úÖ SARIF file exists:"
            ls -la trivy-image-results.sarif
            echo "üìã SARIF file size: $(stat -c%s trivy-image-results.sarif) bytes"
            echo "üîç First few lines of SARIF:"
            head -20 trivy-image-results.sarif
          else
            echo "‚ùå SARIF file not found"
          fi

      # Versioning and Push steps (only run if not build_only mode)
      - name: Analyze commit messages
        if: ${{ !inputs.build_only && steps.build.outcome == 'success' }}
        id: analyze-commits
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline)
          else
            COMMITS=$(git log --oneline)
          fi

          BREAKING_CHANGES=$(echo "$COMMITS" | grep -i "BREAKING CHANGE\|!" | wc -l)
          FEATURES=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ feat" | wc -l)
          FIXES=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ fix" | wc -l)

          if [ "$BREAKING_CHANGES" -gt 0 ]; then
            SUGGESTED_BUMP="major"
          elif [ "$FEATURES" -gt 0 ]; then
            SUGGESTED_BUMP="minor"
          elif [ "$FIXES" -gt 0 ]; then
            SUGGESTED_BUMP="patch"
          else
            SUGGESTED_BUMP="patch"
          fi

          echo "suggested_bump=$SUGGESTED_BUMP" >> $GITHUB_OUTPUT

      - name: Calculate version
        if: ${{ !inputs.build_only && steps.build.outcome == 'success' }}
        id: version
        run: |
          # Prioritize git tags for version calculation, fallback to package.json
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "")
          
          if [ -z "$CURRENT_VERSION" ] && [ -f package.json ] && command -v jq >/dev/null 2>&1; then
            CURRENT_VERSION=$(jq -r '.version // "0.0.0"' package.json)
          fi
          
          if [ -z "$CURRENT_VERSION" ]; then
            CURRENT_VERSION="0.0.0"
          fi

          echo "üìã Current version from git tags: $CURRENT_VERSION"

          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          BUMP_TYPE="${{ steps.analyze-commits.outputs.suggested_bump }}"

          case "$BUMP_TYPE" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "üè∑Ô∏è Calculated new version: $NEW_VERSION (bump: $BUMP_TYPE)"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json
        if: ${{ !inputs.build_only && steps.build.outcome == 'success' && hashFiles('package.json') != '' }}
        run: |
          if command -v jq >/dev/null 2>&1; then
            jq --arg version "${{ steps.version.outputs.new_version }}" '.version = $version' package.json > package.json.tmp
            mv package.json.tmp package.json
          fi

      - name: Commit version changes
        if: ${{ !inputs.build_only && steps.build.outcome == 'success' && hashFiles('package.json') != '' }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}" || echo "No changes to commit"

      - name: Tag and push image to ECR
        if: ${{ !inputs.build_only && steps.build.outcome == 'success' }}
        id: push
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY="${{ secrets.ECR_REPOSITORY_NAME }}"
          VERSION_TAG=${{ steps.version.outputs.new_version }}
          COMMIT_TAG=${{ github.sha }}

          echo "üîç Checking if ECR repository exists..."
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY 2>/dev/null || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY

          echo "üè∑Ô∏è Tagging image for ECR push..."
          docker tag cloudinsight-frontend:$COMMIT_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG
          docker tag cloudinsight-frontend:$COMMIT_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "üì§ Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG"
          echo "‚úÖ Successfully pushed image to ECR: $IMAGE_URI"
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Create git tag (only after successful ECR push)
        if: ${{ !inputs.build_only && steps.push.outcome == 'success' }}
        run: |
          TAG_NAME="v${{ steps.version.outputs.new_version }}"
          echo "üè∑Ô∏è Creating git tag: $TAG_NAME"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin "$TAG_NAME"
          
          echo "‚úÖ Successfully created and pushed git tag: $TAG_NAME"

      - name: Create GitHub Release
        if: ${{ !inputs.build_only && steps.push.outcome == 'success' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body: |
            CloudInsight Frontend Release v${{ steps.version.outputs.new_version }}

            üê≥ **Container Image:** ${{ steps.push.outputs.image_uri }}
            üìù **Commit:** ${{ github.sha }}
            üîÑ **Bump Type:** ${{ steps.analyze-commits.outputs.suggested_bump }}
          draft: false
          prerelease: false

      - name: Build and deployment summary
        if: always()
        run: |
          echo "## üê≥ Build & Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Project Type:** ${{ inputs.project_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag:** cloudinsight-frontend:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Only:** ${{ inputs.build_only }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Push Secrets:** ${{ inputs.push_secrets }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.build.outcome }}" == "success" ]; then
            echo "- **Build Status:** ‚úÖ Build successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Build Status:** ‚ùå Build failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ inputs.build_only }}" == "false" ]; then
            if [ "${{ steps.build.outcome }}" == "success" ]; then
              echo "- **Version:** ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
              
              if [ "${{ steps.push.outcome }}" == "success" ]; then
                echo "- **ECR Push:** ‚úÖ Pushed to ECR" >> $GITHUB_STEP_SUMMARY
                echo "- **Image URI:** ${{ steps.push.outputs.image_uri }}" >> $GITHUB_STEP_SUMMARY
                echo "- **Git Tag:** ‚úÖ Created v${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
                echo "- **GitHub Release:** ‚úÖ Created" >> $GITHUB_STEP_SUMMARY
              else
                echo "- **ECR Push:** ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
                echo "- **Git Tag:** ‚è≠Ô∏è Skipped (ECR push failed)" >> $GITHUB_STEP_SUMMARY
                echo "- **GitHub Release:** ‚è≠Ô∏è Skipped (ECR push failed)" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "- **Version:** ‚è≠Ô∏è Skipped (build failed)" >> $GITHUB_STEP_SUMMARY
              echo "- **ECR Push:** ‚è≠Ô∏è Skipped (build failed)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Version:** ‚è≠Ô∏è Skipped (build only mode)" >> $GITHUB_STEP_SUMMARY
            echo "- **ECR Push:** ‚è≠Ô∏è Skipped (build only mode)" >> $GITHUB_STEP_SUMMARY
          fi
            else
              echo "- **Version:** ‚è≠Ô∏è Skipped (build failed)" >> $GITHUB_STEP_SUMMARY
              echo "- **ECR Push:** ‚è≠Ô∏è Skipped (build failed)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Version:** ‚è≠Ô∏è Skipped (build only mode)" >> $GITHUB_STEP_SUMMARY
            echo "- **ECR Push:** ‚è≠Ô∏è Skipped (build only mode)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Security cleanup
        if: always()
        run: |
          echo "üßπ Performing security cleanup..."
          rm -f ./team-private-key.pem ./temp-aes-key ./.env ./next-public-build-args.txt
          echo "‚úÖ Security cleanup completed"
